Git and GitHub:

Mastering Git & GitHub 1 - 

What is the primary purpose of using Git and GitHub in software development, and how do they complement each other?
Git is a version control system that is installed and maintained on your local system rather than in the cloud and gives you a self-contained record of your ongoing programming versions. It can be used completely exclusive of any cloud-hosting service, you don’t even need internet access to use it.
GitHub is a Git repository hosting service, It’s an online database that allows you to keep track of and share your Git version control projects outside of your local computer/server.
GitHub is exclusively cloud-based unlike Git, also GitHub is a for-profit service although basic repository-hosting features are available at no cost to those who are willing to create a user profile, making GitHub a popular choice for open-source projects.

Explain the concept of forking a repository on GitHub. How does it enable collaborative coding on open-source projects?
Forking a repository lets you create a new repository that shares code with the main repository. Forked repositories are often used to test out new ideas or changes before they are implemented back in the main repository, such as in open source projects or when a user does not have write access to the main repository. Since GitHub is cloud-based, an individual’s Git repositories can be remotely accessed by any authorised person, from any computer, anywhere in the world provided it has an internet connection. 

How can Git help developers manage changes in their code, and what are the key benefits of using version control systems like Git?
Git is responsive, free and easy to use. It has a branching system that allows you to create independent local branches in your code, this means you can try out new ideas, set aside branches for production work, jump back to earlier branches, and easily delete, merge, and recall branches at the click of a button. Allowing you make changes and experiment with your code without affecting the main branch.

In the video, the presenter mentioned the importance of peer review on GitHub. Describe the peer review process on GitHub and its significance in collaborative coding.
Through GitHub, you can share your code with others, giving them the power to make revisions or edits on your various Git branches. This makes it possible for entire teams to coordinate together on single projects in real-time. As changes are introduced, new branches are created, allowing the team to continue to revise the code without overwriting each other’s work. These branches are like copies, and changes made on them do not reflect in the main directories on other users’ machines unless users choose to push/pull the changes to incorporate them.

Can you name at least three popular Git GUI tools or applications that developers can use to manage their Git repositories, and briefly explain their advantages over using the command line for Git operations?
SmartGit, GitForce and GitKraken are popular Git GUI tools that can be used to manage repositories. The platforms have intuitive interfaces and are easy Git clients to master, making it a good choice for people new to Git.
They have many easy-to-use features meaning the user will rarely needs to use the command line. They allow you to configure your repository branches, automatically resolve merge conflicts, compare, edit, and merge files side-by-side without the command line.
GUIs like GitKraken even allow you to undo common actions such as delete branch, commit, remove remote, and discard in one click.


Mastering Git & GitHub 2 -

What are the key differences between Git and GitHub as explained in the video?


How do you initiate a Git repository and what is the significance of the "git add" and "git commit" commands in version control?
To initiate a git repository, you'll use the “git init” command. 
The “git add” command is used to select the changes that will be presented for the next commit, while the “git commit” is used to collect the presented changes to write those changes to the repository permanently.

Explain the purpose of using branches in Git, and how can you create a new branch using Git commands?
Using branches in Git allows you to try out new ideas, jump back to earlier branches, and easily delete, merge, or recall branches; allowing you make changes and experiment with your code without affecting other branches.
Using the “git branch” command followed by the branch name, one is able create a new branch.

What is the importance of creating descriptive commit messages when recording changes in a Git repository?
Descriptive commit messages informs the user or other users of the changes that were made allowing an easier understanding of the code for a person who did not partake in writing the code or for the user when returning to the code at a much later date.

Can you describe the process of switching between branches in Git using the "git checkout" command, and why might you need to do this in a collaborative project?
Using the “git checkout” command followed by the branch name one is able to switch between branches in git. This makes it possible for entire teams to collaborate together on single projects, new branches can be created to allow each individual to continue to revise the code without overwriting each other’s work. These branches are like copies, and changes made on them do not reflect in the main directories on other users’ machines unless users choose to push/pull the changes to incorporate them.


Mastering Git & GitHub 3 -

Describe the process of creating a pull request and why it is a valuable step in the Git workflow, according to the video.
Before using "git pull" command, make sure you are in the correct local branch(using “git checkout”). While using the “git pull” command, specify which remote branch you want to merge with “git pull<branch name>”.
Changes made by a user in different branches do not reflect in the main directories for other users unless they choose to pull the changes to incorporate them in their branch.

Create a public GitHub repository that you can use to store the responses to your bootcamp tasks and ensure the files are properly organised.

